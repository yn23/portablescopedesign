<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\STM3210E-EVAL.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\STM3210E-EVAL.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Mon Jun 22 23:41:00 2009
<BR><P>
<H3>Maximum Stack Usage =        284 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; STM32_LCD_Demo &rArr; ShowMenuIcons &rArr; DisplayIcons &rArr; LCD_NORDisplay &rArr; FSMC_NOR_Init &rArr; GPIO_Init
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[bce658]">BusFaultException</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bce658]">BusFaultException</a><BR>
 <LI><a href="#[bce0b8]">HardFaultException</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bce0b8]">HardFaultException</a><BR>
 <LI><a href="#[bcdf8c]">MemManageException</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bcdf8c]">MemManageException</a><BR>
 <LI><a href="#[bcd71c]">UsageFaultException</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bcd71c]">UsageFaultException</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a8f0]">CopyToSDCard</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a47c]">SDCardToLCD</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a440]">SDCardToLCD_Speed</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a4b8]">ReturnFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a92c]">CopyToNANDFlash</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a620]">NANDFlashToLCD</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a5e4]">NANDFlashToLCD_Speed</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a5a8]">NAND_PhysicalErase</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a4b8]">ReturnFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a9a4]">CopyToExternalSRAM</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a800]">ExternalSRAMToLCD</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a7c4]">ExternalSRAMToLCD_DMA</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a788]">ExternalSRAMToLCD_Speed</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a4b8]">ReturnFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a56c]">NORFlashToLCD</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a530]">NORFlashToLCD_DMA</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a4f4]">NORFlashToLCD_Speed</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a4b8]">ReturnFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a968]">CopyToInternalFlash</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a710]">InternalFlashToLCD</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a6d4]">InternalFlashToLCD_DMA</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a698]">InternalFlashToLCD_Speed</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a4b8]">ReturnFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[bce7fc]">Reset_Handler</a>
 <LI><a href="#[bcdf50]">NMIException</a>
 <LI><a href="#[bce0b8]">HardFaultException</a>
 <LI><a href="#[bcdf8c]">MemManageException</a>
 <LI><a href="#[bce658]">BusFaultException</a>
 <LI><a href="#[bcd71c]">UsageFaultException</a>
 <LI><a href="#[bcdcf8]">SVCHandler</a>
 <LI><a href="#[bce310]">DebugMonitor</a>
 <LI><a href="#[bcded8]">PendSVC</a>
 <LI><a href="#[bcdcbc]">SysTickHandler</a>
 <LI><a href="#[bcd6e0]">WWDG_IRQHandler</a>
 <LI><a href="#[bcdf14]">PVD_IRQHandler</a>
 <LI><a href="#[bcdc80]">TAMPER_IRQHandler</a>
 <LI><a href="#[bcde24]">RTC_IRQHandler</a>
 <LI><a href="#[bce130]">FLASH_IRQHandler</a>
 <LI><a href="#[bcde9c]">RCC_IRQHandler</a>
 <LI><a href="#[bce2d4]">EXTI0_IRQHandler</a>
 <LI><a href="#[bce25c]">EXTI1_IRQHandler</a>
 <LI><a href="#[bce220]">EXTI2_IRQHandler</a>
 <LI><a href="#[bce1e4]">EXTI3_IRQHandler</a>
 <LI><a href="#[bce1a8]">EXTI4_IRQHandler</a>
 <LI><a href="#[bce5a4]">DMA1_Channel1_IRQHandler</a>
 <LI><a href="#[bce568]">DMA1_Channel2_IRQHandler</a>
 <LI><a href="#[bce52c]">DMA1_Channel3_IRQHandler</a>
 <LI><a href="#[bce4f0]">DMA1_Channel4_IRQHandler</a>
 <LI><a href="#[bce4b4]">DMA1_Channel5_IRQHandler</a>
 <LI><a href="#[bce478]">DMA1_Channel6_IRQHandler</a>
 <LI><a href="#[bce43c]">DMA1_Channel7_IRQHandler</a>
 <LI><a href="#[bce6d0]">ADC1_2_IRQHandler</a>
 <LI><a href="#[bcd794]">USB_HP_CAN_TX_IRQHandler</a>
 <LI><a href="#[bcd758]">USB_LP_CAN_RX0_IRQHandler</a>
 <LI><a href="#[bce61c]">CAN_RX1_IRQHandler</a>
 <LI><a href="#[bce5e0]">CAN_SCE_IRQHandler</a>
 <LI><a href="#[bce16c]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[bcdc44]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[bcdb90]">TIM1_UP_IRQHandler</a>
 <LI><a href="#[bcdbcc]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[bcdc08]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[bcdb54]">TIM2_IRQHandler</a>
 <LI><a href="#[bcdb18]">TIM3_IRQHandler</a>
 <LI><a href="#[bcdadc]">TIM4_IRQHandler</a>
 <LI><a href="#[bce040]">I2C1_EV_IRQHandler</a>
 <LI><a href="#[bce07c]">I2C1_ER_IRQHandler</a>
 <LI><a href="#[bcdfc8]">I2C2_EV_IRQHandler</a>
 <LI><a href="#[bce004]">I2C2_ER_IRQHandler</a>
 <LI><a href="#[bcddac]">SPI1_IRQHandler</a>
 <LI><a href="#[bcdd70]">SPI2_IRQHandler</a>
 <LI><a href="#[bcd884]">USART1_IRQHandler</a>
 <LI><a href="#[bcd848]">USART2_IRQHandler</a>
 <LI><a href="#[bcd80c]">USART3_IRQHandler</a>
 <LI><a href="#[bce298]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[bcde60]">RTCAlarm_IRQHandler</a>
 <LI><a href="#[bcd7d0]">USBWakeUp_IRQHandler</a>
 <LI><a href="#[bcd9ec]">TIM8_BRK_IRQHandler</a>
 <LI><a href="#[bcd938]">TIM8_UP_IRQHandler</a>
 <LI><a href="#[bcd974]">TIM8_TRG_COM_IRQHandler</a>
 <LI><a href="#[bcd9b0]">TIM8_CC_IRQHandler</a>
 <LI><a href="#[bce694]">ADC3_IRQHandler</a>
 <LI><a href="#[bce0f4]">FSMC_IRQHandler</a>
 <LI><a href="#[bcdde8]">SDIO_IRQHandler</a>
 <LI><a href="#[bcdaa0]">TIM5_IRQHandler</a>
 <LI><a href="#[bcdd34]">SPI3_IRQHandler</a>
 <LI><a href="#[bcd8fc]">UART4_IRQHandler</a>
 <LI><a href="#[bcd8c0]">UART5_IRQHandler</a>
 <LI><a href="#[bcda64]">TIM6_IRQHandler</a>
 <LI><a href="#[bcda28]">TIM7_IRQHandler</a>
 <LI><a href="#[bce400]">DMA2_Channel1_IRQHandler</a>
 <LI><a href="#[bce3c4]">DMA2_Channel2_IRQHandler</a>
 <LI><a href="#[bce388]">DMA2_Channel3_IRQHandler</a>
 <LI><a href="#[bce34c]">DMA2_Channel4_5_IRQHandler</a>
 <LI><a href="#[171ffe4]">main</a>
 <LI><a href="#[178a170]">__main</a>
 <LI><a href="#[1787ec0]">_sputc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a8f0]">CopyToSDCard</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a47c]">SDCardToLCD</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a440]">SDCardToLCD_Speed</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a4b8]">ReturnFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a92c]">CopyToNANDFlash</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a620]">NANDFlashToLCD</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a5e4]">NANDFlashToLCD_Speed</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a5a8]">NAND_PhysicalErase</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a4b8]">ReturnFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a9a4]">CopyToExternalSRAM</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a800]">ExternalSRAMToLCD</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a7c4]">ExternalSRAMToLCD_DMA</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a788]">ExternalSRAMToLCD_Speed</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a4b8]">ReturnFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a56c]">NORFlashToLCD</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a530]">NORFlashToLCD_DMA</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a4f4]">NORFlashToLCD_Speed</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a4b8]">ReturnFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a968]">CopyToInternalFlash</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a710]">InternalFlashToLCD</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a6d4]">InternalFlashToLCD_DMA</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a698]">InternalFlashToLCD_Speed</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
 <LI><a href="#[178a4b8]">ReturnFunc</a>
 <LI><a href="#[178a74c]">IdleFunc</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[178a170]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(.text)
</UL>
<P><STRONG><a name="[17803f0]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[17802c4]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[180f130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1780288]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[180f130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1780198]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[bce7fc]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_vector.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1789ea0]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178b214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSpareArea
<LI><a href="#[178b250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Write
<LI><a href="#[178b28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Read
<LI><a href="#[178b2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_GetAddress
<LI><a href="#[178b304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ConvertPhyAddress
</UL>

<P><STRONG><a name="[1789e64]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171fe7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
</UL>

<P><STRONG><a name="[1789e28]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[180f8ec]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[180f8b0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1787f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[180f130]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1780288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[17802c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[180f0f4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[180e80c]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[180e7d0]"></a>__decompress1</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[bce6d0]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.ADC1_2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bce694]"></a>ADC3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.ADC3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[c850a4]"></a>ADC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[17201c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[17201c4]"></a>ADC_Config</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, main.o(i.ADC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADC_Config &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c84ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[c84b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[c84c6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[c850a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
</UL>

<P><STRONG><a name="[c84e88]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[178a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD_Speed
<LI><a href="#[178a4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_Speed
<LI><a href="#[178a5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD_Speed
<LI><a href="#[178a698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_Speed
<LI><a href="#[178a788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_Speed
</UL>

<P><STRONG><a name="[c84c6c]"></a>ADC_Init</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17201c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[c84b7c]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17201c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[c84ac8]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[17201c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[bce658]"></a>BusFaultException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFaultException))
<BR><BR>[Calls]<UL><LI><a href="#[bce658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFaultException
</UL>
<BR>[Called By]<UL><LI><a href="#[bce658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFaultException
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bce61c]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.CAN_RX1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bce5e0]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.CAN_SCE_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[171ffa8]"></a>CheckBitmapFiles</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, menu.o(i.CheckBitmapFiles))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CheckBitmapFiles &rArr; FSMC_NOR_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[1724b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_ReturnToReadMode
<LI><a href="#[1724c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_ReadID
<LI><a href="#[1724d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_Init
<LI><a href="#[178b340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Media_BufferRead
<LI><a href="#[178b4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffercmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1720188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitmapFilesStatus
</UL>

<P><STRONG><a name="[1720188]"></a>CheckBitmapFilesStatus</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, main.o(i.CheckBitmapFilesStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = CheckBitmapFilesStatus &rArr; CheckBitmapFiles &rArr; FSMC_NOR_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0d14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[bc4590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DeInit
<LI><a href="#[171ffa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitmapFiles
<LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[1721844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
</UL>
<BR>[Called By]<UL><LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
</UL>

<P><STRONG><a name="[178a9a4]"></a>CopyToExternalSRAM</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, menu.o(i.CopyToExternalSRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = CopyToExternalSRAM &rArr; FSMC_SRAM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[bc7fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[171ff30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[1721bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearLine
<LI><a href="#[1721c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1724454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_WriteBuffer
<LI><a href="#[17244cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[1724b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_ReturnToReadMode
<LI><a href="#[1724c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_ReadID
<LI><a href="#[1724d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_Init
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[178a968]"></a>CopyToInternalFlash</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, menu.o(i.CopyToInternalFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = CopyToInternalFlash &rArr; FSMC_NOR_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[bc7fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c88740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[c8886c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[c88b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[c88bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[171ff30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[1721bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearLine
<LI><a href="#[1721c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1724b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_ReturnToReadMode
<LI><a href="#[1724c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_ReadID
<LI><a href="#[1724d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_Init
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[178a92c]"></a>CopyToNANDFlash</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, menu.o(i.CopyToNANDFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CopyToNANDFlash &rArr; NAND_Write &rArr; ReadSpareArea &rArr; FSMC_NAND_ReadSpareArea &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[bc7fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[171ff30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[1721bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearLine
<LI><a href="#[1721c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1724b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_ReturnToReadMode
<LI><a href="#[1724c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_ReadID
<LI><a href="#[1724d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_Init
<LI><a href="#[1726254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Init
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[178b250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[178a8f0]"></a>CopyToSDCard</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, menu.o(i.CopyToSDCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CopyToSDCard &rArr; LCD_WriteSD &rArr; SD_WriteMultiBlocks &rArr; DMA_TxConfiguration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[bc7fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c81918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDeviceMode
<LI><a href="#[c819cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[c81b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[c81be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[c81c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[171ff30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[1721bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearLine
<LI><a href="#[1721c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1724b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_ReturnToReadMode
<LI><a href="#[1724c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_ReadID
<LI><a href="#[1724d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_Init
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[178b37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteSD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[bce5a4]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bce568]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bce52c]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, stm32f10x_it.o(i.DMA1_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA1_Channel3_IRQHandler &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8aea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[c8aedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[c8afcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[c8b008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[c8b044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[17274d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bce4f0]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bce4b4]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bce478]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bce43c]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bce400]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA2_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bce3c4]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA2_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bce388]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA2_Channel3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bce34c]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA2_Channel4_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[c8b080]"></a>DMA_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[c8214c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
<LI><a href="#[c82188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
</UL>

<P><STRONG><a name="[c8b044]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[bce52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[c8b008]"></a>DMA_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[bce52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[c8214c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
<LI><a href="#[c82188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[178b3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteDMA
</UL>

<P><STRONG><a name="[c8afcc]"></a>DMA_DeInit</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[bce52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[178b3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteDMA
</UL>

<P><STRONG><a name="[c8af54]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c81864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[c81a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
</UL>

<P><STRONG><a name="[c8aedc]"></a>DMA_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[bce52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[178b3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteDMA
</UL>

<P><STRONG><a name="[c8aea0]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bce52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[c8214c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
<LI><a href="#[c82188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[178b3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteDMA
</UL>

<P><STRONG><a name="[bce310]"></a>DebugMonitor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMonitor))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1727550]"></a>Decrement_TimingDelay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.Decrement_TimingDelay))
<BR><BR>[Called By]<UL><LI><a href="#[bcdcbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickHandler
</UL>

<P><STRONG><a name="[1721628]"></a>Delay</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[bcc09c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CounterCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[171fef4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_DemoIntro
<LI><a href="#[1721664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM3210E_LCD_Init
</UL>

<P><STRONG><a name="[172014c]"></a>DelayJoyStick</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(i.DelayJoyStick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DelayJoyStick &rArr; ReadKey
</UL>
<BR>[Calls]<UL><LI><a href="#[bcc09c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CounterCmd
<LI><a href="#[171ff30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
</UL>
<BR>[Called By]<UL><LI><a href="#[178a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD_Speed
<LI><a href="#[178a4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_Speed
<LI><a href="#[178a5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD_Speed
<LI><a href="#[178a698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_Speed
<LI><a href="#[178a788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_Speed
</UL>

<P><STRONG><a name="[178a8b4]"></a>DisplayIcons</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, menu.o(i.DisplayIcons))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = DisplayIcons &rArr; LCD_NORDisplay &rArr; FSMC_NOR_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[17217cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[178a65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NORDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[171fe7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
</UL>

<P><STRONG><a name="[178a878]"></a>DisplayMenu</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, menu.o(i.DisplayMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DisplayMenu &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[1721844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[1721c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[171feb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelFunc
<LI><a href="#[178a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD_Speed
<LI><a href="#[178a47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD
<LI><a href="#[178a4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnFunc
<LI><a href="#[178a4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_Speed
<LI><a href="#[178a530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_DMA
<LI><a href="#[178a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD
<LI><a href="#[178a5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_PhysicalErase
<LI><a href="#[178a5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD_Speed
<LI><a href="#[178a620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD
<LI><a href="#[178a698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_Speed
<LI><a href="#[178a6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_DMA
<LI><a href="#[178a710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD
<LI><a href="#[178a788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_Speed
<LI><a href="#[178a7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_DMA
<LI><a href="#[178a800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD
<LI><a href="#[178a8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToSDCard
<LI><a href="#[178a92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToNANDFlash
<LI><a href="#[178a968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToInternalFlash
<LI><a href="#[178a9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToExternalSRAM
</UL>

<P><STRONG><a name="[178a83c]"></a>DisplayTimingCompute</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, menu.o(i.DisplayTimingCompute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DisplayTimingCompute
</UL>
<BR>[Calls]<UL><LI><a href="#[bcc060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[178a47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD
<LI><a href="#[178a530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_DMA
<LI><a href="#[178a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD
<LI><a href="#[178a620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD
<LI><a href="#[178a6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_DMA
<LI><a href="#[178a710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD
<LI><a href="#[178a7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_DMA
<LI><a href="#[178a800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD
</UL>

<P><STRONG><a name="[1727514]"></a>DownFunc</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, menu.o(i.DownFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DownFunc &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[1721844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
</UL>
<BR>[Called By]<UL><LI><a href="#[bce1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[bce2d4]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bce298]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = EXTI15_10_IRQHandler &rArr; UpFunc &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c8c124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[c8c214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[1727460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bce25c]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bce220]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bce1e4]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = EXTI3_IRQHandler &rArr; DownFunc &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c8c124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[c8c214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[1727514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bce1a8]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bce16c]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c8c124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[c8c214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[172749c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SELStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[c8c214]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[bce16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[bce1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[bce298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
</UL>

<P><STRONG><a name="[c8c124]"></a>EXTI_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[bce16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[bce1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[bce298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[c8c0e8]"></a>EXTI_Init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
</UL>

<P><STRONG><a name="[c8c0ac]"></a>EXTI_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
</UL>

<P><STRONG><a name="[178a800]"></a>ExternalSRAMToLCD</STRONG> (Thumb, 436 bytes, Stack size 32 bytes, menu.o(i.ExternalSRAMToLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = ExternalSRAMToLCD &rArr; ExternalSRAMCheckBitmapFiles &rArr; FSMC_SRAM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc7ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bc7efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[bc7fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[bcc09c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CounterCmd
<LI><a href="#[171ff30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[1721718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP
<LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[17217cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[1721844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[1721c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[17244cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[1787bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[178a404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingMeasurement_Config
<LI><a href="#[178a83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTimingCompute
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[178b4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMCheckBitmapFiles
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[178a7c4]"></a>ExternalSRAMToLCD_DMA</STRONG> (Thumb, 436 bytes, Stack size 32 bytes, menu.o(i.ExternalSRAMToLCD_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = ExternalSRAMToLCD_DMA &rArr; ExternalSRAMCheckBitmapFiles &rArr; FSMC_SRAM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc7ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bc7efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[bc7fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[bcc09c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CounterCmd
<LI><a href="#[171ff30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[17217cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[1721844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[1721c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[17244cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[1787bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[178a404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingMeasurement_Config
<LI><a href="#[178a83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTimingCompute
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[178b3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteDMA
<LI><a href="#[178b4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMCheckBitmapFiles
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[178a788]"></a>ExternalSRAMToLCD_Speed</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, menu.o(i.ExternalSRAMToLCD_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = ExternalSRAMToLCD_Speed &rArr; ExternalSRAMCheckBitmapFiles &rArr; FSMC_SRAM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc7ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bc7efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[bc7fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c84e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[171ff30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[1720020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[172014c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayJoyStick
<LI><a href="#[1721718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP
<LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[17217cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[1721844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[1721c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[17244cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[178b4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMCheckBitmapFiles
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[c88bf0]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[178a968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToInternalFlash
</UL>

<P><STRONG><a name="[c88b00]"></a>FLASH_ErasePage</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c886c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[178a968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToInternalFlash
</UL>

<P><STRONG><a name="[c88a10]"></a>FLASH_GetStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c886c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[bce130]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.FLASH_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[c888a8]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_PrefetchBufferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
</UL>

<P><STRONG><a name="[c8886c]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c886c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[178a968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToInternalFlash
</UL>

<P><STRONG><a name="[c8877c]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
</UL>

<P><STRONG><a name="[c88740]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[178a968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToInternalFlash
</UL>

<P><STRONG><a name="[c886c8]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c88a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c8886c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[c88b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[bce0f4]"></a>FSMC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.FSMC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc9f90]"></a>FSMC_NANDCmd</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(i.FSMC_NANDCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1726254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Init
</UL>

<P><STRONG><a name="[bc9edc]"></a>FSMC_NANDInit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f10x_fsmc.o(i.FSMC_NANDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NANDInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1726254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Init
</UL>

<P><STRONG><a name="[1726308]"></a>FSMC_NAND_AddressIncrement</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fsmc_nand.o(i.FSMC_NAND_AddressIncrement))
<BR><BR>[Called By]<UL><LI><a href="#[17260ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WriteSmallPage
<LI><a href="#[17261a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadSpareArea
<LI><a href="#[17261dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadSmallPage
</UL>

<P><STRONG><a name="[17262cc]"></a>FSMC_NAND_EraseBlock</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fsmc_nand.o(i.FSMC_NAND_EraseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FSMC_NAND_EraseBlock &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1726290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[178a5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_PhysicalErase
<LI><a href="#[178b250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Write
</UL>

<P><STRONG><a name="[1726290]"></a>FSMC_NAND_GetStatus</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, fsmc_nand.o(i.FSMC_NAND_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1726164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[17260ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WriteSmallPage
<LI><a href="#[17261a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadSpareArea
<LI><a href="#[17261dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadSmallPage
<LI><a href="#[17262cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_EraseBlock
</UL>

<P><STRONG><a name="[1726254]"></a>FSMC_NAND_Init</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, fsmc_nand.o(i.FSMC_NAND_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = FSMC_NAND_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bc80a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bc9edc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NANDInit
<LI><a href="#[bc9f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NANDCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[178a5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_PhysicalErase
<LI><a href="#[178a5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD_Speed
<LI><a href="#[178a620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD
<LI><a href="#[178a92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToNANDFlash
</UL>

<P><STRONG><a name="[17261dc]"></a>FSMC_NAND_ReadSmallPage</STRONG> (Thumb, 122 bytes, Stack size 44 bytes, fsmc_nand.o(i.FSMC_NAND_ReadSmallPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FSMC_NAND_ReadSmallPage &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1726290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_GetStatus
<LI><a href="#[1726308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_AddressIncrement
</UL>
<BR>[Called By]<UL><LI><a href="#[178b28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Read
</UL>

<P><STRONG><a name="[17261a0]"></a>FSMC_NAND_ReadSpareArea</STRONG> (Thumb, 122 bytes, Stack size 44 bytes, fsmc_nand.o(i.FSMC_NAND_ReadSpareArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FSMC_NAND_ReadSpareArea &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1726290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_GetStatus
<LI><a href="#[1726308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_AddressIncrement
</UL>
<BR>[Called By]<UL><LI><a href="#[178b214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSpareArea
</UL>

<P><STRONG><a name="[1726164]"></a>FSMC_NAND_ReadStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsmc_nand.o(i.FSMC_NAND_ReadStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1726290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_GetStatus
</UL>

<P><STRONG><a name="[17260ec]"></a>FSMC_NAND_WriteSmallPage</STRONG> (Thumb, 146 bytes, Stack size 52 bytes, fsmc_nand.o(i.FSMC_NAND_WriteSmallPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FSMC_NAND_WriteSmallPage &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1726290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_GetStatus
<LI><a href="#[1726308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_AddressIncrement
</UL>
<BR>[Called By]<UL><LI><a href="#[178b250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Write
</UL>

<P><STRONG><a name="[bc9e64]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1721934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
<LI><a href="#[17244cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[1724d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_Init
</UL>

<P><STRONG><a name="[bc9dec]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1721934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
<LI><a href="#[17244cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[1724d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_Init
</UL>

<P><STRONG><a name="[1724d00]"></a>FSMC_NOR_Init</STRONG> (Thumb, 228 bytes, Stack size 104 bytes, fsmc_nor.o(i.FSMC_NOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = FSMC_NOR_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bc80a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bc9dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[bc9e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[171ffa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitmapFiles
<LI><a href="#[178a4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_Speed
<LI><a href="#[178a530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_DMA
<LI><a href="#[178a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD
<LI><a href="#[178a65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NORDisplay
<LI><a href="#[178a8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToSDCard
<LI><a href="#[178a92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToNANDFlash
<LI><a href="#[178a968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToInternalFlash
<LI><a href="#[178a9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToExternalSRAM
</UL>

<P><STRONG><a name="[1724c10]"></a>FSMC_NOR_ReadID</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsmc_nor.o(i.FSMC_NOR_ReadID))
<BR><BR>[Called By]<UL><LI><a href="#[171ffa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitmapFiles
<LI><a href="#[178a4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_Speed
<LI><a href="#[178a530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_DMA
<LI><a href="#[178a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD
<LI><a href="#[178a65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NORDisplay
<LI><a href="#[178a8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToSDCard
<LI><a href="#[178a92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToNANDFlash
<LI><a href="#[178a968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToInternalFlash
<LI><a href="#[178a9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToExternalSRAM
</UL>

<P><STRONG><a name="[1724b98]"></a>FSMC_NOR_ReturnToReadMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsmc_nor.o(i.FSMC_NOR_ReturnToReadMode))
<BR><BR>[Called By]<UL><LI><a href="#[171ffa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitmapFiles
<LI><a href="#[178a4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_Speed
<LI><a href="#[178a530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_DMA
<LI><a href="#[178a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD
<LI><a href="#[178a65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NORDisplay
<LI><a href="#[178a8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToSDCard
<LI><a href="#[178a92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToNANDFlash
<LI><a href="#[178a968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToInternalFlash
<LI><a href="#[178a9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToExternalSRAM
</UL>

<P><STRONG><a name="[17244cc]"></a>FSMC_SRAM_Init</STRONG> (Thumb, 222 bytes, Stack size 112 bytes, fsmc_sram.o(i.FSMC_SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = FSMC_SRAM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bc80a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bc9dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[bc9e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[178a788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_Speed
<LI><a href="#[178a7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_DMA
<LI><a href="#[178a800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD
<LI><a href="#[178a9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToExternalSRAM
<LI><a href="#[178b4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMCheckBitmapFiles
</UL>

<P><STRONG><a name="[1724454]"></a>FSMC_SRAM_WriteBuffer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsmc_sram.o(i.FSMC_SRAM_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_SRAM_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[178a9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToExternalSRAM
</UL>

<P><STRONG><a name="[1720110]"></a>GPIO_Config</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, main.o(i.GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc7ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bc80a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bc8154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
</UL>

<P><STRONG><a name="[bc8154]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1720110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[bc80a0]"></a>GPIO_Init</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c81b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[1720110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[1721b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
<LI><a href="#[17244cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[1724d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_Init
<LI><a href="#[1726254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Init
</UL>

<P><STRONG><a name="[bc7fb0]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[171fe7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
<LI><a href="#[171ff30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[178a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD_Speed
<LI><a href="#[178a47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD
<LI><a href="#[178a4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_Speed
<LI><a href="#[178a530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_DMA
<LI><a href="#[178a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD
<LI><a href="#[178a5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD_Speed
<LI><a href="#[178a620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD
<LI><a href="#[178a698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_Speed
<LI><a href="#[178a6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_DMA
<LI><a href="#[178a710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD
<LI><a href="#[178a788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_Speed
<LI><a href="#[178a7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_DMA
<LI><a href="#[178a800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD
<LI><a href="#[178a8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToSDCard
<LI><a href="#[178a92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToNANDFlash
<LI><a href="#[178a968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToInternalFlash
<LI><a href="#[178a9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToExternalSRAM
</UL>

<P><STRONG><a name="[bc7efc]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[178a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD_Speed
<LI><a href="#[178a47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD
<LI><a href="#[178a4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_Speed
<LI><a href="#[178a530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_DMA
<LI><a href="#[178a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD
<LI><a href="#[178a5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD_Speed
<LI><a href="#[178a620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD
<LI><a href="#[178a698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_Speed
<LI><a href="#[178a6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_DMA
<LI><a href="#[178a710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD
<LI><a href="#[178a788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_Speed
<LI><a href="#[178a7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_DMA
<LI><a href="#[178a800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD
</UL>

<P><STRONG><a name="[bc7ec0]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1720110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[178a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD_Speed
<LI><a href="#[178a47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD
<LI><a href="#[178a4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_Speed
<LI><a href="#[178a530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_DMA
<LI><a href="#[178a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD
<LI><a href="#[178a5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD_Speed
<LI><a href="#[178a620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD
<LI><a href="#[178a698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_Speed
<LI><a href="#[178a6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_DMA
<LI><a href="#[178a710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD
<LI><a href="#[178a788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_Speed
<LI><a href="#[178a7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_DMA
<LI><a href="#[178a800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD
</UL>

<P><STRONG><a name="[bce0b8]"></a>HardFaultException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFaultException))
<BR><BR>[Calls]<UL><LI><a href="#[bce0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFaultException
</UL>
<BR>[Called By]<UL><LI><a href="#[bce0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFaultException
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bce07c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C1_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bce040]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C1_EV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bce004]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C2_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcdfc8]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C2_EV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[178a74c]"></a>IdleFunc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(i.IdleFunc))
<BR>[Address Reference Count : 6]<UL><LI> menu.o(.data)
<LI> menu.o(.data)
<LI> menu.o(.data)
<LI> menu.o(.data)
<LI> menu.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[17200d4]"></a>IntExtOnOffConfig</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, main.o(i.IntExtOnOffConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IntExtOnOffConfig &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8c0ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_StructInit
<LI><a href="#[c8c0e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[c8c214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[171fe7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
<LI><a href="#[171ffe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[178a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD_Speed
<LI><a href="#[178a47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD
<LI><a href="#[178a4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_Speed
<LI><a href="#[178a530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_DMA
<LI><a href="#[178a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD
<LI><a href="#[178a5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_PhysicalErase
<LI><a href="#[178a5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD_Speed
<LI><a href="#[178a620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD
<LI><a href="#[178a698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_Speed
<LI><a href="#[178a6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_DMA
<LI><a href="#[178a710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD
<LI><a href="#[178a788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_Speed
<LI><a href="#[178a7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_DMA
<LI><a href="#[178a800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD
<LI><a href="#[178a8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToSDCard
<LI><a href="#[178a92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToNANDFlash
<LI><a href="#[178a968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToInternalFlash
<LI><a href="#[178a9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToExternalSRAM
</UL>

<P><STRONG><a name="[178a710]"></a>InternalFlashToLCD</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, menu.o(i.InternalFlashToLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = InternalFlashToLCD &rArr; DisplayMenu &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[bc7ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bc7efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[bc7fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[bcc09c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CounterCmd
<LI><a href="#[171ff30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[1721718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP
<LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[17217cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[1721844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[1721c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1787bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[178a404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingMeasurement_Config
<LI><a href="#[178a83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTimingCompute
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[178b46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashCheckBitmapFiles
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[178a6d4]"></a>InternalFlashToLCD_DMA</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, menu.o(i.InternalFlashToLCD_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = InternalFlashToLCD_DMA &rArr; DisplayMenu &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[bc7ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bc7efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[bc7fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[bcc09c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CounterCmd
<LI><a href="#[171ff30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[17217cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[1721844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[1721c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1787bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[178a404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingMeasurement_Config
<LI><a href="#[178a83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTimingCompute
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[178b3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteDMA
<LI><a href="#[178b46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashCheckBitmapFiles
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[178a698]"></a>InternalFlashToLCD_Speed</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, menu.o(i.InternalFlashToLCD_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = InternalFlashToLCD_Speed &rArr; DisplayMenu &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[bc7ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bc7efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[bc7fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c84e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[171ff30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[1720020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[172014c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayJoyStick
<LI><a href="#[1721718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP
<LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[17217cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[1721844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[1721c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[178b46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashCheckBitmapFiles
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[1720098]"></a>InterruptConfig</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, main.o(i.InterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = InterruptConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc3fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemHandlerPriorityConfig
<LI><a href="#[bc4068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[bc4248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[bc4284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[bc4590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
</UL>

<P><STRONG><a name="[1721c04]"></a>LCD_Clear</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, lcd.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1721808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[171fe7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
<LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
<LI><a href="#[178a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD_Speed
<LI><a href="#[178a47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD
<LI><a href="#[178a4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_Speed
<LI><a href="#[178a530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_DMA
<LI><a href="#[178a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD
<LI><a href="#[178a5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_PhysicalErase
<LI><a href="#[178a5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD_Speed
<LI><a href="#[178a620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD
<LI><a href="#[178a698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_Speed
<LI><a href="#[178a6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_DMA
<LI><a href="#[178a710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD
<LI><a href="#[178a788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_Speed
<LI><a href="#[178a7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_DMA
<LI><a href="#[178a800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[178a8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToSDCard
<LI><a href="#[178a92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToNANDFlash
<LI><a href="#[178a968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToInternalFlash
<LI><a href="#[178a9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToExternalSRAM
</UL>

<P><STRONG><a name="[1721bc8]"></a>LCD_ClearLine</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd.o(i.LCD_ClearLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_ClearLine &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
</UL>
<BR>[Called By]<UL><LI><a href="#[178a8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToSDCard
<LI><a href="#[178a92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToNANDFlash
<LI><a href="#[178a968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToInternalFlash
<LI><a href="#[178a9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToExternalSRAM
</UL>

<P><STRONG><a name="[1721b8c]"></a>LCD_CtrlLinesConfig</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lcd.o(i.LCD_CtrlLinesConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_CtrlLinesConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bc0f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[bc80a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1721664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM3210E_LCD_Init
</UL>

<P><STRONG><a name="[1721b50]"></a>LCD_DisplayChar</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd.o(i.LCD_DisplayChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_DisplayChar &rArr; LCD_DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1721a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
</UL>

<P><STRONG><a name="[1721a9c]"></a>LCD_DisplayStringLine</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lcd.o(i.LCD_DisplayStringLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1721b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[171fe7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
<LI><a href="#[1720188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitmapFilesStatus
<LI><a href="#[1721bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearLine
<LI><a href="#[1727460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpFunc
<LI><a href="#[1727514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownFunc
<LI><a href="#[178a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD_Speed
<LI><a href="#[178a47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD
<LI><a href="#[178a4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_Speed
<LI><a href="#[178a530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_DMA
<LI><a href="#[178a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD
<LI><a href="#[178a5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_PhysicalErase
<LI><a href="#[178a5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD_Speed
<LI><a href="#[178a620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD
<LI><a href="#[178a698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_Speed
<LI><a href="#[178a6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_DMA
<LI><a href="#[178a710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD
<LI><a href="#[178a788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_Speed
<LI><a href="#[178a7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_DMA
<LI><a href="#[178a800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[178a8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToSDCard
<LI><a href="#[178a92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToNANDFlash
<LI><a href="#[178a968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToInternalFlash
<LI><a href="#[178a9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToExternalSRAM
</UL>

<P><STRONG><a name="[1721a60]"></a>LCD_DrawChar</STRONG> (Thumb, 88 bytes, Stack size 36 bytes, lcd.o(i.LCD_DrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1721808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[1721b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayChar
</UL>

<P><STRONG><a name="[17219e8]"></a>LCD_DrawLine</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lcd.o(i.LCD_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_DrawLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1721808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[1721970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
</UL>

<P><STRONG><a name="[1721970]"></a>LCD_DrawRect</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, lcd.o(i.LCD_DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LCD_DrawRect &rArr; LCD_DrawLine
</UL>
<BR>[Calls]<UL><LI><a href="#[17219e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[171fe7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
</UL>

<P><STRONG><a name="[1721934]"></a>LCD_FSMCConfig</STRONG> (Thumb, 84 bytes, Stack size 88 bytes, lcd.o(i.LCD_FSMCConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = LCD_FSMCConfig &rArr; LCD_NORDisplay &rArr; FSMC_NOR_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc9dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[bc9e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[178a65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NORDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1721664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM3210E_LCD_Init
</UL>

<P><STRONG><a name="[178a65c]"></a>LCD_NORDisplay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, menu.o(i.LCD_NORDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = LCD_NORDisplay &rArr; FSMC_NOR_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[1721718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP
<LI><a href="#[1724b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_ReturnToReadMode
<LI><a href="#[1724c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_ReadID
<LI><a href="#[1724d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[171fef4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_DemoIntro
<LI><a href="#[1721934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
<LI><a href="#[178a8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIcons
</UL>

<P><STRONG><a name="[1721844]"></a>LCD_SetBackColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetBackColor))
<BR><BR>[Called By]<UL><LI><a href="#[171fe7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
<LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
<LI><a href="#[1720188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitmapFilesStatus
<LI><a href="#[1727460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpFunc
<LI><a href="#[1727514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownFunc
<LI><a href="#[178a47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD
<LI><a href="#[178a530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_DMA
<LI><a href="#[178a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD
<LI><a href="#[178a5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_PhysicalErase
<LI><a href="#[178a620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD
<LI><a href="#[178a698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_Speed
<LI><a href="#[178a6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_DMA
<LI><a href="#[178a710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD
<LI><a href="#[178a788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_Speed
<LI><a href="#[178a7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_DMA
<LI><a href="#[178a800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
</UL>

<P><STRONG><a name="[1721808]"></a>LCD_SetCursor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetCursor))
<BR><BR>[Called By]<UL><LI><a href="#[17217cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[17219e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[1721a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
<LI><a href="#[1721c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[17217cc]"></a>LCD_SetDisplayWindow</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, lcd.o(i.LCD_SetDisplayWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[1721808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[171fef4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_DemoIntro
<LI><a href="#[1721754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WindowModeDisable
<LI><a href="#[178a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD_Speed
<LI><a href="#[178a47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD
<LI><a href="#[178a4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_Speed
<LI><a href="#[178a530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_DMA
<LI><a href="#[178a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD
<LI><a href="#[178a5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD_Speed
<LI><a href="#[178a620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD
<LI><a href="#[178a698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_Speed
<LI><a href="#[178a6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_DMA
<LI><a href="#[178a710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD
<LI><a href="#[178a788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_Speed
<LI><a href="#[178a7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_DMA
<LI><a href="#[178a800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD
<LI><a href="#[178a8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIcons
<LI><a href="#[178b3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SDDisplay
<LI><a href="#[178b430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NANDDisplay
</UL>

<P><STRONG><a name="[1721790]"></a>LCD_SetTextColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetTextColor))
<BR><BR>[Called By]<UL><LI><a href="#[171fe7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
<LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
<LI><a href="#[1720188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitmapFilesStatus
<LI><a href="#[1727460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpFunc
<LI><a href="#[1727514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownFunc
<LI><a href="#[178a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD_Speed
<LI><a href="#[178a47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD
<LI><a href="#[178a4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_Speed
<LI><a href="#[178a530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_DMA
<LI><a href="#[178a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD
<LI><a href="#[178a5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_PhysicalErase
<LI><a href="#[178a5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD_Speed
<LI><a href="#[178a620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD
<LI><a href="#[178a698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_Speed
<LI><a href="#[178a6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_DMA
<LI><a href="#[178a710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD
<LI><a href="#[178a788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_Speed
<LI><a href="#[178a7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_DMA
<LI><a href="#[178a800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[178a8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToSDCard
<LI><a href="#[178a92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToNANDFlash
<LI><a href="#[178a968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToInternalFlash
<LI><a href="#[178a9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToExternalSRAM
</UL>

<P><STRONG><a name="[1721754]"></a>LCD_WindowModeDisable</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, lcd.o(i.LCD_WindowModeDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WindowModeDisable &rArr; LCD_SetDisplayWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[17217cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[171fe7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
</UL>

<P><STRONG><a name="[1721718]"></a>LCD_WriteBMP</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, lcd.o(i.LCD_WriteBMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_WriteBMP
</UL>
<BR>[Called By]<UL><LI><a href="#[178a4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_Speed
<LI><a href="#[178a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD
<LI><a href="#[178a65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NORDisplay
<LI><a href="#[178a698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_Speed
<LI><a href="#[178a710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD
<LI><a href="#[178a788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_Speed
<LI><a href="#[178a800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD
</UL>

<P><STRONG><a name="[17216dc]"></a>LCD_WriteRAM</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.LCD_WriteRAM))
<BR><BR>[Called By]<UL><LI><a href="#[178b3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SDDisplay
<LI><a href="#[178b430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NANDDisplay
</UL>

<P><STRONG><a name="[17216a0]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd.o(i.LCD_WriteRAM_Prepare))
<BR><BR>[Called By]<UL><LI><a href="#[178b3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteDMA
<LI><a href="#[178b3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SDDisplay
<LI><a href="#[178b430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NANDDisplay
</UL>

<P><STRONG><a name="[17274d8]"></a>LCD_WriteReg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd.o(i.LCD_WriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[bce52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[178b3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteDMA
<LI><a href="#[178b3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SDDisplay
<LI><a href="#[178b430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NANDDisplay
</UL>

<P><STRONG><a name="[bcdf8c]"></a>MemManageException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManageException))
<BR><BR>[Calls]<UL><LI><a href="#[bcdf8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManageException
</UL>
<BR>[Called By]<UL><LI><a href="#[bcdf8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManageException
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[171ff6c]"></a>Menu_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, menu.o(i.Menu_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Menu_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[171fe7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
<LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
</UL>

<P><STRONG><a name="[178a620]"></a>NANDFlashToLCD</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, menu.o(i.NANDFlashToLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = NANDFlashToLCD &rArr; LCD_NANDDisplay &rArr; NAND_Read &rArr; ReadSpareArea &rArr; FSMC_NAND_ReadSpareArea &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[bc7ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bc7efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[bc7fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[bcc09c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CounterCmd
<LI><a href="#[171ff30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[17217cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[1721844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[1721c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1726254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Init
<LI><a href="#[1787bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[178a404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingMeasurement_Config
<LI><a href="#[178a83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTimingCompute
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[178b430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NANDDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[178a5e4]"></a>NANDFlashToLCD_Speed</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, menu.o(i.NANDFlashToLCD_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = NANDFlashToLCD_Speed &rArr; LCD_NANDDisplay &rArr; NAND_Read &rArr; ReadSpareArea &rArr; FSMC_NAND_ReadSpareArea &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[bc7ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bc7efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[bc7fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c84e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[171ff30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[1720020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[172014c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayJoyStick
<LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[17217cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[1721c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1726254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Init
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[178b430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NANDDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[178a5a8]"></a>NAND_PhysicalErase</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, menu.o(i.NAND_PhysicalErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = NAND_PhysicalErase &rArr; FSMC_NAND_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[171ff30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[1721844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[1721c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1726254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Init
<LI><a href="#[17262cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_EraseBlock
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[178b214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSpareArea
<LI><a href="#[178b304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ConvertPhyAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[bcdf50]"></a>NMIException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMIException))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[178a56c]"></a>NORFlashToLCD</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, menu.o(i.NORFlashToLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = NORFlashToLCD &rArr; FSMC_NOR_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[bc7ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bc7efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[bc7fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[bcc09c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CounterCmd
<LI><a href="#[171ff30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[1721718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP
<LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[17217cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[1721844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[1721c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1724b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_ReturnToReadMode
<LI><a href="#[1724c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_ReadID
<LI><a href="#[1724d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_Init
<LI><a href="#[1787bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[178a404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingMeasurement_Config
<LI><a href="#[178a83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTimingCompute
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[178a530]"></a>NORFlashToLCD_DMA</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, menu.o(i.NORFlashToLCD_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = NORFlashToLCD_DMA &rArr; FSMC_NOR_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[bc7ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bc7efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[bc7fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[bcc09c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CounterCmd
<LI><a href="#[171ff30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[17217cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[1721844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[1721c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1724b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_ReturnToReadMode
<LI><a href="#[1724c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_ReadID
<LI><a href="#[1724d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_Init
<LI><a href="#[1787bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[178a404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingMeasurement_Config
<LI><a href="#[178a83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTimingCompute
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[178b3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteDMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[178a4f4]"></a>NORFlashToLCD_Speed</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, menu.o(i.NORFlashToLCD_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = NORFlashToLCD_Speed &rArr; FSMC_NOR_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[bc7ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bc7efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[bc7fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c84e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[171ff30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[1720020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[172014c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayJoyStick
<LI><a href="#[1721718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP
<LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[17217cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[1721c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1724b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_ReturnToReadMode
<LI><a href="#[1724c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_ReadID
<LI><a href="#[1724d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_Init
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[bc4590]"></a>NVIC_DeInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_nvic.o(i.NVIC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[1720098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptConfig
<LI><a href="#[1720188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitmapFilesStatus
</UL>

<P><STRONG><a name="[bc4284]"></a>NVIC_Init</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, stm32f10x_nvic.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1720098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptConfig
</UL>

<P><STRONG><a name="[bc4248]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_nvic.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1720098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptConfig
</UL>

<P><STRONG><a name="[bc4068]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_nvic.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[1720098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptConfig
</UL>

<P><STRONG><a name="[bc3fb4]"></a>NVIC_SystemHandlerPriorityConfig</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f10x_nvic.o(i.NVIC_SystemHandlerPriorityConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_SystemHandlerPriorityConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1720098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptConfig
</UL>

<P><STRONG><a name="[bcdf14]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcded8]"></a>PendSVC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSVC))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc0f30]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c81b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[171fe7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
<LI><a href="#[171ffa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitmapFiles
<LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
<LI><a href="#[1721b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
<LI><a href="#[178a4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_Speed
<LI><a href="#[178a530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_DMA
<LI><a href="#[178a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD
<LI><a href="#[178a65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NORDisplay
<LI><a href="#[178a8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIcons
<LI><a href="#[178a8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToSDCard
<LI><a href="#[178a92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToNANDFlash
<LI><a href="#[178a968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToInternalFlash
<LI><a href="#[178a9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToExternalSRAM
</UL>

<P><STRONG><a name="[bc0e7c]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c81b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
<LI><a href="#[1721b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
<LI><a href="#[17244cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[1724d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NOR_Init
<LI><a href="#[1726254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Init
</UL>

<P><STRONG><a name="[bc0d14]"></a>RCC_DeInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
<LI><a href="#[1720188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitmapFilesStatus
</UL>

<P><STRONG><a name="[bc0cd8]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[178a404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingMeasurement_Config
</UL>

<P><STRONG><a name="[bc0c9c]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[bc0864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
</UL>

<P><STRONG><a name="[bc0c24]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
</UL>

<P><STRONG><a name="[bc0be8]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
</UL>

<P><STRONG><a name="[bc0bac]"></a>RCC_HSEConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
</UL>

<P><STRONG><a name="[bcde9c]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.RCC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc0a44]"></a>RCC_PCLK1Config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
</UL>

<P><STRONG><a name="[bc0a08]"></a>RCC_PCLK2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
</UL>

<P><STRONG><a name="[bc09cc]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
</UL>

<P><STRONG><a name="[bc0990]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
</UL>

<P><STRONG><a name="[bc08dc]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
</UL>

<P><STRONG><a name="[bc0864]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
</UL>

<P><STRONG><a name="[bcde60]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.RTCAlarm_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcde24]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[171ff30]"></a>ReadKey</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, menu.o(i.ReadKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadKey
</UL>
<BR>[Calls]<UL><LI><a href="#[bc7fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[171fe7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
<LI><a href="#[172014c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayJoyStick
<LI><a href="#[178a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD_Speed
<LI><a href="#[178a47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD
<LI><a href="#[178a4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_Speed
<LI><a href="#[178a530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_DMA
<LI><a href="#[178a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD
<LI><a href="#[178a5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_PhysicalErase
<LI><a href="#[178a5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD_Speed
<LI><a href="#[178a620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD
<LI><a href="#[178a698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_Speed
<LI><a href="#[178a6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_DMA
<LI><a href="#[178a710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD
<LI><a href="#[178a788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_Speed
<LI><a href="#[178a7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_DMA
<LI><a href="#[178a800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD
<LI><a href="#[178a8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToSDCard
<LI><a href="#[178a92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToNANDFlash
<LI><a href="#[178a968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToInternalFlash
<LI><a href="#[178a9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToExternalSRAM
</UL>

<P><STRONG><a name="[178a4b8]"></a>ReturnFunc</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, menu.o(i.ReturnFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = ReturnFunc &rArr; ShowMenuIcons &rArr; DisplayIcons &rArr; LCD_NORDisplay &rArr; FSMC_NOR_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[171fe7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
</UL>
<BR>[Address Reference Count : 5]<UL><LI> menu.o(.data)
<LI> menu.o(.data)
<LI> menu.o(.data)
<LI> menu.o(.data)
<LI> menu.o(.data)
</UL>
<P><STRONG><a name="[178a47c]"></a>SDCardToLCD</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, menu.o(i.SDCardToLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SDCardToLCD &rArr; LCD_SDDisplay &rArr; SD_ReadMultiBlocks &rArr; DMA_RxConfiguration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc7ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bc7efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[bc7fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[bcc09c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CounterCmd
<LI><a href="#[c81918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDeviceMode
<LI><a href="#[c819cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[c81b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[c81be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[c81c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[171ff30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[17217cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[1721844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[1721c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1787bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[178a404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingMeasurement_Config
<LI><a href="#[178a83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTimingCompute
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[178b3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SDDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[178a440]"></a>SDCardToLCD_Speed</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, menu.o(i.SDCardToLCD_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SDCardToLCD_Speed &rArr; LCD_SDDisplay &rArr; SD_ReadMultiBlocks &rArr; DMA_RxConfiguration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc7ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bc7efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[bc7fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c81918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDeviceMode
<LI><a href="#[c819cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[c81b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[c81be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[c81c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[c84e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[171ff30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[1720020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[172014c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayJoyStick
<LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[17217cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[1721c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
<LI><a href="#[178b3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SDDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[c8d63c]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[c81864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[c81a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[c81abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[c820d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[c82110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[c821c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[c82200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[c8223c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[c8d600]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[c81a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[c8d5c4]"></a>SDIO_ClockCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c81abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[c8d510]"></a>SDIO_DMACmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[c81864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[c81a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
</UL>

<P><STRONG><a name="[c8d4d4]"></a>SDIO_DataConfig</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f10x_sdio.o(i.SDIO_DataConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDIO_DataConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c81864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[c81a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[c82110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[c8d45c]"></a>SDIO_DeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[c81b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[c8d420]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[c820d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[c821c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[c8223c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[c8d36c]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c81864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[c81a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[c81a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[c81abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[c82110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[c8d330]"></a>SDIO_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c81a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[c8d2f4]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[c81b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[c8d2b8]"></a>SDIO_GetResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_GetResponse))
<BR><BR>[Called By]<UL><LI><a href="#[c81864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[c81a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[c81abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[c81b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[c82098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[c820d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[c821c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[c8223c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[bcdde8]"></a>SDIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc &rArr; SD_StopTransfer &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[c81a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[c8d27c]"></a>SDIO_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c81864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[c81a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[c81a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[c8d240]"></a>SDIO_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f10x_sdio.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c81abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[c81b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[c81c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[c8d204]"></a>SDIO_ReadData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[c81a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[c81a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[c82110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[c8d18c]"></a>SDIO_SendCommand</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[c81864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[c818dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[c819cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[c81a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[c81abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[c81b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[c82098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[c820d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[c82110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[c8d114]"></a>SDIO_SetPowerState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[c81abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[c8cfac]"></a>SDIO_WriteData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_WriteData))
<BR><BR>[Called By]<UL><LI><a href="#[c81864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[c81a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[c81c60]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, sdcard.o(i.SD_EnableWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[c82098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[c8d240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[178a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD_Speed
<LI><a href="#[178a47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD
<LI><a href="#[178a8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToSDCard
</UL>

<P><STRONG><a name="[c81be8]"></a>SD_GetCardInfo</STRONG> (Thumb, 570 bytes, Stack size 28 bytes, sdcard.o(i.SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[178a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD_Speed
<LI><a href="#[178a47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD
<LI><a href="#[178a8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToSDCard
</UL>

<P><STRONG><a name="[c81b70]"></a>SD_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sdcard.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SD_Init &rArr; SD_PowerON &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bc0f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[bc80a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c81abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[c81b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[c8d240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[c8d45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[178a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD_Speed
<LI><a href="#[178a47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD
<LI><a href="#[178a8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToSDCard
</UL>

<P><STRONG><a name="[c81b34]"></a>SD_InitializeCards</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, sdcard.o(i.SD_InitializeCards))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error
</UL>
<BR>[Calls]<UL><LI><a href="#[c821c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[c82200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[c8d18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[c8d2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[c8d2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
</UL>
<BR>[Called By]<UL><LI><a href="#[c81b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[c81abc]"></a>SD_PowerON</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, sdcard.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_PowerON &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[c8223c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[c8d114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[c8d18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[c8d240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[c8d2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[c8d36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[c8d5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[c8d63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[c81b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[c81a80]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, sdcard.o(i.SD_ProcessIRQSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_ProcessIRQSrc &rArr; SD_StopTransfer &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[c818dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[c8cfac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteData
<LI><a href="#[c8d204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[c8d27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[c8d330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetITStatus
<LI><a href="#[c8d36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[c8d600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[bcdde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[c81a08]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 566 bytes, Stack size 40 bytes, sdcard.o(i.SD_ReadMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SD_ReadMultiBlocks &rArr; DMA_RxConfiguration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8205c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[c82188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[c8223c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[c8af54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[c8d18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[c8d204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[c8d27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[c8d2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[c8d36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[c8d4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[c8d510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[c8d63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[178b3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SDDisplay
</UL>

<P><STRONG><a name="[c819cc]"></a>SD_SelectDeselect</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sdcard.o(i.SD_SelectDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_SelectDeselect &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[c8223c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[c8d18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[178a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD_Speed
<LI><a href="#[178a47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD
<LI><a href="#[178a8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToSDCard
</UL>

<P><STRONG><a name="[c81918]"></a>SD_SetDeviceMode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sdcard.o(i.SD_SetDeviceMode))
<BR><BR>[Called By]<UL><LI><a href="#[178a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD_Speed
<LI><a href="#[178a47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD
<LI><a href="#[178a8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToSDCard
</UL>

<P><STRONG><a name="[c818dc]"></a>SD_StopTransfer</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sdcard.o(i.SD_StopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_StopTransfer &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[c8223c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[c8d18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[c81a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[c81864]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 728 bytes, Stack size 48 bytes, sdcard.o(i.SD_WriteMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_WriteMultiBlocks &rArr; DMA_TxConfiguration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8205c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[c820d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[c8214c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
<LI><a href="#[c8223c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[c8af54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[c8cfac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteData
<LI><a href="#[c8d18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[c8d27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[c8d2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[c8d36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[c8d4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[c8d510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[c8d63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[178b37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteSD
</UL>

<P><STRONG><a name="[bcddac]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SPI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcdd70]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SPI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcdd34]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SPI3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1721664]"></a>STM3210E_LCD_Init</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, lcd.o(i.STM3210E_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = STM3210E_LCD_Init &rArr; LCD_FSMCConfig &rArr; LCD_NORDisplay &rArr; FSMC_NOR_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1721628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[1721934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
<LI><a href="#[1721b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
</UL>

<P><STRONG><a name="[172005c]"></a>STM32_LCD_Demo</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, main.o(i.STM32_LCD_Demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = STM32_LCD_Demo &rArr; ShowMenuIcons &rArr; DisplayIcons &rArr; LCD_NORDisplay &rArr; FSMC_NOR_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[bc08dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[bc0990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[bc09cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[bc0a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[bc0a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[bc0bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[bc0be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[bc0c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[bc0c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[bc0d14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[bc0e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bc0f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[c8877c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[c888a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
<LI><a href="#[171fe7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
<LI><a href="#[171fef4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_DemoIntro
<LI><a href="#[171ff6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
<LI><a href="#[1720020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[1720098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptConfig
<LI><a href="#[1720110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[1720188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitmapFilesStatus
<LI><a href="#[17201c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[1721664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM3210E_LCD_Init
<LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[1721844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[1721c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[171ffe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171fef4]"></a>STM32_LCD_DemoIntro</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, menu.o(i.STM32_LCD_DemoIntro))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = STM32_LCD_DemoIntro &rArr; LCD_NORDisplay &rArr; FSMC_NOR_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1721628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[17217cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[178a65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NORDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
</UL>

<P><STRONG><a name="[bcdcf8]"></a>SVCHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVCHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[171feb8]"></a>SelFunc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, menu.o(i.SelFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SelFunc &rArr; DisplayMenu &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[178a878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[171fe7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuIcons
<LI><a href="#[171ffe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[172749c]"></a>Set_SELStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.Set_SELStatus))
<BR><BR>[Called By]<UL><LI><a href="#[bce16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[171fe7c]"></a>ShowMenuIcons</STRONG> (Thumb, 606 bytes, Stack size 88 bytes, menu.o(i.ShowMenuIcons))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = ShowMenuIcons &rArr; DisplayIcons &rArr; LCD_NORDisplay &rArr; FSMC_NOR_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[bc7fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[171feb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelFunc
<LI><a href="#[171ff30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[171ff6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
<LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
<LI><a href="#[1721754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WindowModeDisable
<LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[1721844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[1721970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[1721c04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1789e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[178a8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIcons
</UL>
<BR>[Called By]<UL><LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
<LI><a href="#[178a4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnFunc
</UL>

<P><STRONG><a name="[bcdcbc]"></a>SysTickHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTickHandler))
<BR><BR>[Calls]<UL><LI><a href="#[1727550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrement_TimingDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcc0d8]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_systick.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1720020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[178a404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingMeasurement_Config
</UL>

<P><STRONG><a name="[1720020]"></a>SysTick_Config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[bcbfac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_SetReload
<LI><a href="#[bcbfe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ITConfig
<LI><a href="#[bcc0d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
<LI><a href="#[178a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD_Speed
<LI><a href="#[178a4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_Speed
<LI><a href="#[178a5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD_Speed
<LI><a href="#[178a698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_Speed
<LI><a href="#[178a788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_Speed
</UL>

<P><STRONG><a name="[bcc09c]"></a>SysTick_CounterCmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_systick.o(i.SysTick_CounterCmd))
<BR><BR>[Called By]<UL><LI><a href="#[172014c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayJoyStick
<LI><a href="#[1721628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[178a404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingMeasurement_Config
<LI><a href="#[178a47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD
<LI><a href="#[178a530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_DMA
<LI><a href="#[178a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD
<LI><a href="#[178a620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD
<LI><a href="#[178a6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_DMA
<LI><a href="#[178a710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD
<LI><a href="#[178a7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_DMA
<LI><a href="#[178a800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD
</UL>

<P><STRONG><a name="[bcc060]"></a>SysTick_GetCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_systick.o(i.SysTick_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[178a83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTimingCompute
</UL>

<P><STRONG><a name="[bcbfe8]"></a>SysTick_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_systick.o(i.SysTick_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1720020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[178a404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingMeasurement_Config
</UL>

<P><STRONG><a name="[bcbfac]"></a>SysTick_SetReload</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_systick.o(i.SysTick_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[1720020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[178a404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingMeasurement_Config
</UL>

<P><STRONG><a name="[bcdc80]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TAMPER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcdc44]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_BRK_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcdc08]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_CC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcdbcc]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_TRG_COM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcdb90]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_UP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcdb54]"></a>TIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcdb18]"></a>TIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcdadc]"></a>TIM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcdaa0]"></a>TIM5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcda64]"></a>TIM6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcda28]"></a>TIM7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcd9ec]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM8_BRK_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcd9b0]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM8_CC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcd974]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM8_TRG_COM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcd938]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM8_UP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[178a404]"></a>TimingMeasurement_Config</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, menu.o(i.TimingMeasurement_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TimingMeasurement_Config &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[bcbfac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_SetReload
<LI><a href="#[bcbfe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ITConfig
<LI><a href="#[bcc09c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CounterCmd
<LI><a href="#[bcc0d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[178a47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD
<LI><a href="#[178a530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_DMA
<LI><a href="#[178a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD
<LI><a href="#[178a620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD
<LI><a href="#[178a6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_DMA
<LI><a href="#[178a710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD
<LI><a href="#[178a7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_DMA
<LI><a href="#[178a800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD
</UL>

<P><STRONG><a name="[bcd8fc]"></a>UART4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UART4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcd8c0]"></a>UART5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UART5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcd884]"></a>USART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcd848]"></a>USART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcd80c]"></a>USART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USART3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcd7d0]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USBWakeUp_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcd794]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USB_HP_CAN_TX_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcd758]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USB_LP_CAN_RX0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1727460]"></a>UpFunc</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, menu.o(i.UpFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UpFunc &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1721790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[1721844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[1721a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
</UL>
<BR>[Called By]<UL><LI><a href="#[bce298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[bcd71c]"></a>UsageFaultException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFaultException))
<BR><BR>[Calls]<UL><LI><a href="#[bcd71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFaultException
</UL>
<BR>[Called By]<UL><LI><a href="#[bcd71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFaultException
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bcd6e0]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.WWDG_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1787c68]"></a>__0sprintf$1</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1787ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1787f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1787c2c]"></a>__1sprintf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[1787bf0]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[178a47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD
<LI><a href="#[178a530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_DMA
<LI><a href="#[178a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD
<LI><a href="#[178a620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD
<LI><a href="#[178a6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_DMA
<LI><a href="#[178a710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD
<LI><a href="#[178a7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_DMA
<LI><a href="#[178a800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD
</UL>

<P><STRONG><a name="[180e974]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[180e938]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[180e8fc]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[171ffe4]"></a>main</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = main &rArr; STM32_LCD_Demo &rArr; ShowMenuIcons &rArr; DisplayIcons &rArr; LCD_NORDisplay &rArr; FSMC_NOR_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[171feb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelFunc
<LI><a href="#[172005c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_LCD_Demo
<LI><a href="#[17200d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntExtOnOffConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c8223c]"></a>CmdResp1Error</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, sdcard.o(i.CmdResp1Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[c8d2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[c8d420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[c8d63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[c81864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[c818dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[c819cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[c81a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[c81abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[c82098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[c82110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[c82200]"></a>CmdResp2Error</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sdcard.o(i.CmdResp2Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Calls]<UL><LI><a href="#[c8d63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[c81b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[c821c4]"></a>CmdResp6Error</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, sdcard.o(i.CmdResp6Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp6Error
</UL>
<BR>[Calls]<UL><LI><a href="#[c8d2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[c8d420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[c8d63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[c81b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[c82188]"></a>DMA_RxConfiguration</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, sdcard.o(i.DMA_RxConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA_RxConfiguration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8aea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[c8b008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[c8b080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[c81a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
</UL>

<P><STRONG><a name="[c8214c]"></a>DMA_TxConfiguration</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, sdcard.o(i.DMA_TxConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA_TxConfiguration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8aea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[c8b008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[c8b080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[c81864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
</UL>

<P><STRONG><a name="[c82110]"></a>FindSCR</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, sdcard.o(i.FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[c8223c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[c8d18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[c8d204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[c8d36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[c8d4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[c8d63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[c82098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[c820d4]"></a>IsCardProgramming</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, sdcard.o(i.IsCardProgramming))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IsCardProgramming &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[c8d18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[c8d2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[c8d420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[c8d63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[c81864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
</UL>

<P><STRONG><a name="[c82098]"></a>SDEnWideBus</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, sdcard.o(i.SDEnWideBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[c82110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[c8223c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[c8d18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[c8d2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[c81c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[c8205c]"></a>convert_from_bytes_to_power_of_two</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdcard.o(i.convert_from_bytes_to_power_of_two))
<BR><BR>[Called By]<UL><LI><a href="#[c81864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[c81a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
</UL>

<P><STRONG><a name="[178b4e4]"></a>Buffercmp</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, menu.o(i.Buffercmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Buffercmp
</UL>
<BR>[Called By]<UL><LI><a href="#[171ffa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitmapFiles
<LI><a href="#[178b46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashCheckBitmapFiles
<LI><a href="#[178b4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMCheckBitmapFiles
</UL>

<P><STRONG><a name="[178b4a8]"></a>ExternalSRAMCheckBitmapFiles</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, menu.o(i.ExternalSRAMCheckBitmapFiles))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ExternalSRAMCheckBitmapFiles &rArr; FSMC_SRAM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17244cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[178b4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffercmp
</UL>
<BR>[Called By]<UL><LI><a href="#[178a788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_Speed
<LI><a href="#[178a7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_DMA
<LI><a href="#[178a800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD
</UL>

<P><STRONG><a name="[178b46c]"></a>InternalFlashCheckBitmapFiles</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, menu.o(i.InternalFlashCheckBitmapFiles))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InternalFlashCheckBitmapFiles &rArr; Buffercmp
</UL>
<BR>[Calls]<UL><LI><a href="#[178b4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffercmp
</UL>
<BR>[Called By]<UL><LI><a href="#[178a698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_Speed
<LI><a href="#[178a6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_DMA
<LI><a href="#[178a710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD
</UL>

<P><STRONG><a name="[178b430]"></a>LCD_NANDDisplay</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, menu.o(i.LCD_NANDDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_NANDDisplay &rArr; NAND_Read &rArr; ReadSpareArea &rArr; FSMC_NAND_ReadSpareArea &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[17216a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[17216dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[17217cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[17274d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[178b28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[178a5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD_Speed
<LI><a href="#[178a620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDFlashToLCD
</UL>

<P><STRONG><a name="[178b3f4]"></a>LCD_SDDisplay</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, menu.o(i.LCD_SDDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_SDDisplay &rArr; SD_ReadMultiBlocks &rArr; DMA_RxConfiguration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c81a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[17216a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[17216dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[17217cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[17274d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[178a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD_Speed
<LI><a href="#[178a47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardToLCD
</UL>

<P><STRONG><a name="[178b3b8]"></a>LCD_WriteDMA</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, menu.o(i.LCD_WriteDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_WriteDMA &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8aea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[c8aedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[c8afcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[c8b008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[17216a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[17274d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[178a530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORFlashToLCD_DMA
<LI><a href="#[178a6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlashToLCD_DMA
<LI><a href="#[178a7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalSRAMToLCD_DMA
</UL>

<P><STRONG><a name="[178b37c]"></a>LCD_WriteSD</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, menu.o(i.LCD_WriteSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_WriteSD &rArr; SD_WriteMultiBlocks &rArr; DMA_TxConfiguration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c81864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[178a8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToSDCard
</UL>

<P><STRONG><a name="[178b340]"></a>Media_BufferRead</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, menu.o(i.Media_BufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Media_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[171ffa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitmapFiles
</UL>

<P><STRONG><a name="[178b304]"></a>NAND_ConvertPhyAddress</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, menu.o(i.NAND_ConvertPhyAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NAND_ConvertPhyAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[1789ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[178a5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_PhysicalErase
<LI><a href="#[178b214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSpareArea
</UL>

<P><STRONG><a name="[178b2c8]"></a>NAND_GetAddress</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, menu.o(i.NAND_GetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NAND_GetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[1789ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[178b250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Write
<LI><a href="#[178b28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Read
</UL>

<P><STRONG><a name="[178b28c]"></a>NAND_Read</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, menu.o(i.NAND_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = NAND_Read &rArr; ReadSpareArea &rArr; FSMC_NAND_ReadSpareArea &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[17261dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadSmallPage
<LI><a href="#[1789ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[178b214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSpareArea
<LI><a href="#[178b2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_GetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[178b430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_NANDDisplay
</UL>

<P><STRONG><a name="[178b250]"></a>NAND_Write</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, menu.o(i.NAND_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = NAND_Write &rArr; ReadSpareArea &rArr; FSMC_NAND_ReadSpareArea &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[17260ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WriteSmallPage
<LI><a href="#[17262cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_EraseBlock
<LI><a href="#[1789ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[178b214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSpareArea
<LI><a href="#[178b2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_GetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[178a92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToNANDFlash
</UL>

<P><STRONG><a name="[178b214]"></a>ReadSpareArea</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, menu.o(i.ReadSpareArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ReadSpareArea &rArr; FSMC_NAND_ReadSpareArea &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[17261a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadSpareArea
<LI><a href="#[1789ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[178b304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ConvertPhyAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[178a5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_PhysicalErase
<LI><a href="#[178b250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Write
<LI><a href="#[178b28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Read
</UL>

<P><STRONG><a name="[1787f38]"></a>_printf_core</STRONG> (Thumb, 328 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180f8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1787c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>

<P><STRONG><a name="[1787ec0]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1787c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
